<div class="container-fluid">
    <div class="row">
        <div id="CreateReview" class="col-md-12">
           
            @using (Html.BeginForm("Create", "Reviews", FormMethod.Post, new { @id = "create-review-form", @class = "text-center", enctype = "multipart/form-data" }))
            {
                    <!-- Stars (hidden) -->
                    @Html.HiddenFor(model => model.StarRating)
                    <!--Stars-->
                    
                    <!-- STARS CONTAINER -->
               
                    <div id="stars-container" class="row text-center">
                         @*Gray star for "zero" rating*@
                        <h3 id="starMessage">No rating given yet.</h3>
                    </div>
                    <!-- Autocomplete -->
                    <div class="form-group">
                        <!--Location Field-->
                        <div class="col-md-6 locationField">
                            @{
                                if (Model == null)
                                {
                                    @Html.Editor("Search", new { htmlAttributes = new { @class = "form-control", id = "autocomplete", onFocus = "geolocate()", text = @Model.PlaceName, } })
                                }
                            }
                        </div>
                        <!--Image Field-->
                        <div class="col-md-6 text-left" id="imageField">
                            <input type="file" id="postPhoto" class="input-file" name="Image" accept="image/*" data-multiple-caption="{count} Photos " />
                            <label class="text-center" for="postPhoto"><span>Photo </span><i class="fa fa-picture-o"></i></label>
                        </div>
                    </div>
                    <!--Headline-->
                    <div class="form-group">
                        <div class="col-sm-12">
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control unset-max-width", id="text", placeholder = "Headline", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!--Main Body-->
                    <div class="form-group">
                        <div class="col-sm-12">
                            @Html.EditorFor(model => model.Body, new { htmlAttributes = new { @class = "form-control unset-max-width disable-resize", id="text", placeholder = "Tell the world..." } })
                            @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!--Dropdowns-->
                    
                    <!-- Added id tags for all dropdowns to allow separate styling -->
                    <div class="row">
                        <!--"I Am" Dropdown-->
                        <div class="col-xs-4 col-sm-3" id= "dropdown">
                            @Html.EnumDropDownListFor(model => model.ResidentType, "I am...", htmlAttributes: new { @class = "form-control", @id="btn"})
                            @Html.ValidationMessageFor(model => model.ResidentType, "", new { @class = "text-danger" })
                        </div>
                        <!--"Come Here For" Dropdown-->
                        <div class="col-xs-4 col-sm-3" id= "dropdown">
                            @Html.EnumDropDownListFor(model => model.SubjectType, "Come here for...", htmlAttributes: new { @class = "form-control", @id = "btn" })
                            @Html.ValidationMessageFor(model => model.SubjectType, "", new { @class = "text-danger" })
                        </div>
                        @{
                            var listCostRating = new List<Object> {
                new { Text = "Free", Value=0},
                new { Text = "$$$$$", Value=5}
                };
                        }
                        <!--"Cost" Dropdown-->
                        <div class="col-xs-4 col-sm-3" id= "dropdown">
                            @Html.DropDownListFor(model => model.CostRating, new SelectList(listCostRating, "Value", "Text"), "Price Range", new { @class = "form-control", @id = "btn" })
                            @Html.ValidationMessageFor(model => model.CostRating, "", new { @class = "text-danger" })
                        </div>
                        @*<div class="form-group">
                                @Html.LabelFor(model => model.StarRating, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                </div>
                            </div>*@
                        <div class="col-xs-2 col-xs-offset-4 col-sm-3">
                            <input type="submit" value="Create" class="btn btn-default" id="create-review-btn" />
                        </div>
                    </div>
                </div>
                            }
        </div>
    </div>
</div>
<div>
    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
    @section autocomplete {
        <script src="/Scripts/Custom/GoogleAutoComplete.js"></script>
    }
    <!--ORIGINAL API URL:
    <script src="https://maps.googleapis.com/maps/api/js?key=GOOGLEAPIKEY&libraries=places&callback=initAutocomplete" async defer></script>
    -->
    <script src="https://maps.googleapis.com/maps/api/js?key=GOOGLEAPIKEY&libraries=places&callback=initAutocomplete" async defer></script>
    <script src="~/Scripts/Custom/starHover.js"></script>
   
    <script>
        var inputs = document.querySelectorAll('.input-file');
            });
        });
    </script>